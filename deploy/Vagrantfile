# -*- mode: ruby -*-
# vi: set ft=ruby :

require 'fileutils'

# number of instances
$spark_num_instances = 1
$cassandra_num_instances = 3 
spark_distro = "spark-1.2.0-bin-hadoop2.4"
spark_master_host = "scale1.docker" # see the logic below, we set hostname = scale#{i}.docker.

# load configuration from config.rb
CONFIG = File.join(File.dirname(__FILE__), "config.rb")
if File.exist?(CONFIG)
  require CONFIG
end

require "yaml"

_config = YAML.load(File.open(File.join(File.dirname(__FILE__), "vagrantconfig.yaml"), File::RDONLY).read)
CONF = _config

ENV['VAGRANT_DEFAULT_PROVIDER'] ||= 'docker'

Vagrant.require_version ">= 1.6.0"

VAGRANTFILE_API_VERSION = "2"
Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|

# nodes definition
  (1..$spark_num_instances).each do |i|
    config.vm.define "scale#{i}" do |scale|
      scale.vm.provider "docker" do |d|
        d.build_dir = "spark/"
        d.create_args = ["--privileged=true", "-m", CONF["docker"]['memory_size'] + "m"]
        d.remains_running = false
        d.has_ssh = true
        if "#{i}" == "1"
            d.ports = [CONF["namenode_ui_port"] + ":50070", CONF["yarn_ui_port"] + ":8088", CONF["hbase_ui_port"] + ":60010"]
        end
      end
     ### All machines will have java.
     scale.vm.provision "shell", inline:"echo \"export JAVA_HOME=/usr/lib/jvm/java-1.7.0-openjdk/\" >> /opt/#{spark_distro}/conf/spark-env.sh"
     #scale.vm.provision "shell", inline:"echo \"export SPARK_MASTER_IP=scale1.docker\" >> /opt/#{spark_distro}/conf/spark-env.sh" 
      
     ### Spark master.
     if "#{i}" == "1"
          scale.vm.provision "shell", inline:"/opt/#{spark_distro}/sbin/start-master.sh"
     end

     ## All nodes have a worker [for real micro servs, make this for i>2.
     scale.vm.provision "shell", inline:"/opt/#{spark_distro}/sbin/start-slave.sh -h spark://#{spark_master_host}:7077"
     scale.ssh.username = "root"
     scale.ssh.port = 22
     scale.vm.hostname = "scale#{i}.docker" 
     scale.vm.synced_folder "./", "/scale-shared/"
    end
  end

end
